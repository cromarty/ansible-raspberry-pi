# ANSIBLE MANAGED
[sound]
# Turn sound on or off:
enabled={{ (fenrir_sound_enabled|default(true))|ternary(True,False) }}

# Select the driver used to play sounds, choices are genericDriver and gstreamerDriver.
# Sox is the default.
#driver=gstreamerDriver
#driver=genericDriver
driver={{ fenrir_sound_driver|default('genericDriver') }}

# Sound themes. These are the pack of sounds used for sound alerts.
# Sound packs may be located at /usr/share/sounds
# For system wide availability, or ~/.local/share/fenrirscreenreader/sounds
# For the current user.
theme={{ fenrir_sound_theme|default('default') }}

# Sound volume controls how loud the sounds for your selected soundpack are.
# 0 is quietest, 1.0 is loudest.
volume={{ fenrir_sound_volume|default(1.0) }}

# shell commands for generic sound driver
# the folowing variable are substituted
# fenrirVolume = the current volume setting
# fenrirSoundFile = the soundfile for an soundicon
# fenrirFrequence = the frequency to play
# fenrirDuration = the duration of the frequency
# the following command is used to play a soundfile
#genericPlayFileCommand={{ fenrir_sound_genericPlayFileCommand|default('fix this') }}
genericPlayFileCommand=play -q -v fenrirVolume fenrirSoundFile
#the following command is used to generate a frequency beep
#genericFrequencyCommand={{ fenrir_sound_genericFrequencyCommand|default('fix this') }}
genericFrequencyCommand=play -q -v fenrirVolume -n -c1 synth fenrirDuration sine fenrirFrequence

[speech]
# Turn speech on or off:
enabled={{ (fenrir_speech_enabled|default(true))|ternary(True,False) }}

# Select speech driver, options are speechdDriver (default), genericDriver, emacspeak or espeakDriver:
#driver=speechdDriver
#driver=espeakDriver
#driver=emacspeakDriver
driver={{ fenrir_speech_driver|default('genericDriver') }}

# server path for emacspeak
#serverPath={{ fenrir_speech_serverPath|default('/usr/local/src/emacspeak/servers/native-espeak') }}
serverPath=/home/chrys/Projekte/emacspeak/servers/espeak

# The rate selects how fast Fenrir will speak. Options range from 0, slowest, to 1.0, fastest.
rate={{ fenrir_speech_rate|default(0.65) }}

# Pitch controls the pitch of the voice, select from 0, lowest, to 1.0, highest.
pitch={{ fenrir_speech_pitch|default(0.5) }}
# Pitch for capital letters
capitalPitch={{ fenrir_speech_capitalPitch|default(0.9) }}

# Volume controls the loudness of the voice, select from 0, quietest, to 1.0, loudest.
volume={{ fenrir_speech_volume|default(1.0) }}

# Module is used for Speech-dispatcher, to select the speech module you want to use.
# Consult Speech-dispatcher's configuration and help Fenrir find out which modules are available.
# The default is espeak.
module={{ fenrir_speech_module|default('espeak') }}

# Voice selects the varient you want to use, for example, f5 will use the female voice #5 in Espeak,
# or if using the Espeak module in Speech-dispatcher. To find out which voices are available, consult the documentation provided with your selected synthesizer.
# This also sets the voice used in the generic driver.
voice={{ fenrir_speech_voice|default('en-us') }}

# Select the language you want Fenrir to use.
language={{ fenrir_speech_language|default('english-us') }}

# Read new text as it happens?
autoReadIncoming={{ (fenrir_speech_autoReadIncoming|default(true))|ternary(True,False) }}

# genericSpeechCommand is the command that is executed for talking
# the following variables are replaced with values 
# fenrirText = is the text that should be spoken
# fenrirModule = may be the speech module like used in speech-dispatcher, not every TTY need this
# fenrirLanguage = the language 
# fenrirVoice = is the current voice that should be used. Set the voice variable above.
# the current volume, pitch and rate is calculated like this
# value = min + settingValue * (min - max )
# fenrirVolume = is replaced with the current volume
# fenrirPitch = is replaced with the current pitch
# fenrirRate = is replaced with the current speed (speech rate)
genericSpeechCommand={{ fenrir_speech_genericSpeachCommand|default('fix this') }}
#genericSpeechCommand=espeak -a fenrirVolume -s fenrirRate -p fenrirPitch -v fenrirVoice -- "fenrirText"

# those are the min and max values of the TTS system that is used in genericSpeechCommand
fenrirMinVolume={{ fenrir_speech_MinVolume|default(0) }}
fenrirMaxVolume={{ fenrir_speech_MaxVolume|default(200) }}
fenrirMinPitch={{ fenrir_speech_MinPitch|default(0) }}
fenrirMaxPitch={{ fenrir_speech_MaxPitch|default(99) }}
fenrirMinRate={{ fenrir_speech_MinRate|default(80) }}
fenrirMaxRate={{ fenrir_speech_MaxRate|default(450) }}

[braille]
enabled={{ (fenrir_braille_enabled|default(false))|ternary(True,False) }}
driver={{ fenrir_braille_driver|default('dummyDriver') }}
layout={{ fenrir_braille_layout|default('en') }}
# to what should the flush timeout relate to 
# word = flush after (number of words to display) * seconds
# char = flush after (number of chars to display) * seconds
# fix = flush after X seconds
# none = no automatic flush (manual via shortcut)
flushMode={{ fenrir_braille_FlushMode|default('word') }}
# seconds to flush or
# -1 = no automatic flush (manual via shortcut)
flushTimeout={{ fenrir_braille_flushTimeout|default(3) }}
# how should the cursor be focused?
# page = if cursor cross the border move to next page and start at beginn
# fixCell = ajust the cursor on an special cell where it is always placed. the display scroll here more smooth.
cursorFocusMode={{ fenrir_braille_cursorFocusMode|default('page') }}
# define the cell on the Braille device where fenrir should scroll and keep the cursor
# 0 = first cell on device
# -1 = last cell on device 
# >0 = fix cell number
fixCursorOnCell={{ fenrir_braille_fixCursorOnCell|default(-1) }}
#How should the braille follow the focus
# none = no automatic toggle command used
# review = priority to review
# last = follow last used cursor
cursorFollowMode={{ fenrir_braille_cursorFollowMode|default('review') }}
# number of cells in panning (horizontal)
# 0 = display size, >0 number of cells
panSizeHorizontal={{ fenrir_braille_panSizeHorizontal|default(0) }}

[screen]
driver={{ fenrir_screen_driver|default('vcsaDriver') }}
encoding={{ fenrir_screen_encoding|default('auto') }}
screenUpdateDelay={{ fenrir_screen_updateDelay|default(0.05) }}
suspendingScreen={{ fenrir_screen_suspendingScreen|default('') }}
autoDetectSuspendingScreen={{ (fenrir_screen_autoDetectSuspendingScreen|default(true))|ternary(True,False) }}

[keyboard]
driver={{ fenrir_keyboard_driver|default('evdevDriver') }}
# filter input devices NOMICE, ALL or a DEVICE NAME
device={{ fenrir_keyboard_device|default('ALL') }}
# gives Fenrir exclusive access to the keyboard and lets it control keystrokes.
grabDevices={{ (fenrir_keyboard_grabDevices|default(true))|ternary(True,False) }}
ignoreShortcuts={{ (fenrir_keyboard_ignoreShortcuts|default(false))|ternary(True,False) }}
# the current shortcut layout located in /etc/fenrirscreenreader/keyboard
keyboardLayout={{ fenrir_keyboard_keyboardLayout|default('desktop') }}
# echo chars while typing.
charEcho={{ (fenrir_keyboard_charEcho|default(true))|ternary(True,False) }}
# echo deleted chars
charDeleteEcho={{ (fenrir_keyboard_charDeleteEcho|default(true))|ternary(True,False) }}
# echo word after pressing space
wordEcho={{ (fenrir_keyboard_wordEcho|default(false))|ternary(True,False) }}
# interrupt speech on any keypress
interruptOnKeyPress={{ (fenrir_keyboard_interruptOnKeyPress|default(true))|ternary(True,False) }}
# you can filter the keys on that the speech should interrupt (empty = all keys, otherwhise the given keys)
interruptOnKeyPressFilter={{ fenrir_keyboard_interruptOnKeyPressFilter|default('') }}
# timeout for double tap in sec
doubleTapTimeout={{ fenrir_keyboard_doubleTapTimeout|default(0.2) }}

[general]
debugLevel={{ fenrir_general_debugLevel|default(0) }}
# debugMode sets where the debug output should send to:
# debugMode=File writes to debugFile (Default: /var/log/fenrirscreenreader/fenrir.log)
# debugMode=Print just prints on the screen
debugMode={{ fenrir_general_debugMode|default('File') }}
debugFile={{ fenrir_general_debugFile|default('/var/log/fenrirscreenreader/fenrir.log') }}
punctuationProfile={{ fenrir_general_punctuationProfile|default('default') }}
punctuationLevel={{ fenrir_general_punctuationLevel|default('some') }}
respectPunctuationPause={{ (fenrir_general_respectPunctuationPause|default(true))|ternary(True,False) }}
newLinePause={{ (fenrir_general_newLinePause|default(true))|ternary(True,False) }}
numberOfClipBoards={{ fenrir_general_numberOfClipBoards|default(10) }}
# used path for "export_clipboard_to_file"
# $user is replaced by username
clipboardExportPath={{ fenrir_general_clipboardExportPath|default('/home/$user/.fenrirClipboard') }}
emoticons={{ (fenrir_general_emoticons|default(true))|ternary(True,False) }}
# define the current Fenrir key
fenrirKeys={{ fenrir_general_fenrirKeys|default('KEY_KP0,KEY_META,KEY_INSERT') }}
scriptKey={{ fenrir_general_scriptKey|default('KEY_COMPOSE') }}
timeFormat={{ fenrir_general_timeFormat|default('%H:%M:%P') }}
dateFormat={{ fenrir_general_dateFormat|default('%A, %B %d, %Y') }}
autoSpellCheck={{ (fenrir_general_autoSpellCheck|default(true))|ternary(True,False) }}
spellCheckLanguage={{ fenrir_general_spellCheckLanguage|default('en_US') }}
# path for your scripts "scriptKey" functionality
scriptPath={{ fenrir_general_scriptPath|default('/usr/share/fenrirscreenreader/scripts') }}
# overload commands, and create new one without changing Fenrir default
commandPath={{ fenrir_general_commandPath|default('') }}
#fenrirBGColor = the backgroundcolor
#fenrirFGColor = the foregroundcolor
#fenrirUnderline = speak the underline attribute
#fenrirBold = speak the bold attribute
#fenrirBlink = speak the blink attribute
#fenrirFont = the font
#fenrirFontSize = the fontsize
attributeFormatString={{ fenrir_general_attributeFormatString|default('Background fenrirBGColor,Foreground fenrirFGColor,fenrirUnderline,fenrirBold,fenrirBlink, Font fenrirFont,Fontsize fenrirFontSize') }}
#attributeFormatString=Background fenrirBGColor,Foreground fenrirFGColor,fenrirUnderline,fenrirBold,fenrirBlink, Font fenrirFont,Fontsize fenrirFontSize
autoPresentIndent={{ (fenrir_general_autoPresentIndent|default(true))|ternary(True,False) }}
# play a sound when attributes are changeing
hasAttributes={{ (fenrir_general_hasAttributes|default(true))|ternary(True,False) }}
# shell for PTY emulatiun (empty = default shell)
shell={{ fenrir_general_shell|default('') }}

[focus]
#follow the text cursor
cursor={{ (fenrir_focus_cursor|default(true))|ternary(True,False) }}
#follow highlighted text changes
highlight={{ (fenrir_focus_highlight|default(false))|ternary(True,False) }}

[remote]
enable={{ (fenrir_remote_enable|default(true))|ternary(True,False) }}
# driver
# unixDriver = unix sockets
# tcpDriver = tcp (localhost only)
driver={{ fenrir_remote_driver|default('unixDriver') }}
driver=unixDriver
# tcp port
port={{ fenrir_remote_port|default('22447') }}
# socket filepath
socketpath={{ fenrir_remote_socketpath|default('/tmp/') }}
# allow settings to overwrite
enableSettingsRemote={{ (fenrir_remote_enableSettingsRemote|default(true))|ternary(True,False) }}
# allow commands to be executed
enableCommandRemote={{ (fenrir_remote_enableCommandRemote|default(true))|ternary(True,False) }}

[barrier]
enabled={{ (fenrir_barrier_enabled|default(true))|ternary(True,False) }}
leftBarriers={{ fenrir_barrier_leftBarriers|default('') }}
rightBarriers={{ fenrir_barrier_rightBarriers|default('') }}
  
[review]
lineBreak={{ (fenrir_review_lineBreak|default(true))|ternary(True,False) }}
endOfScreen={{ (fenrir_review_endOfScreen|default(true))|ternary(True,False) }}
# leave the review when pressing a key
leaveReviewOnCursorChange={{ (fenrir_review_leaveReviewOnCursorChange|default(true))|ternary(True,False) }}
# leave the review when changing the screen
leaveReviewOnScreenChange={{ (fenrir_review_leaveReviewOnScreenChange|default(true))|ternary(True,False) }}

[promote]
enabled={{ (fenrir_promote_enabled|default(true))|ternary(True,False) }}
inactiveTimeoutSec={{ fenrir_promote_inactiveTimeoutSec|default(120) }}
list={{ fenrir_promote_list|default('') }}

[time]
# automatic time anouncement
enabled={{ (fenrir_time_enabled|default(false))|ternary(True,False) }}
# present time
presentTime={{ (fenrir_time_presentTime|default(true))|ternary(True,False) }}
# present date (on change)
presentDate={{ (fenrir_time_presentDate|default(true))|ternary(True,False) }}
# present time after a given period of seconds
delaySec={{ fenrir_time_delaySec|default(0) }}
# present time after to given minutes example every 15 minutes: 00,15,30,45
# if delaySec is >0 onMinutes is ignored
onMinutes={{ fenrir_time_onMinutes|default('00,30') }}
# announce via soundicon (not interrupting)
announce={{ (fenrir_time_announce|default(true))|ternary(True,False) }}
# interrupt current speech for time announcement
interrupt={{ (fenrir_time_interrupt|default(false))|ternary(True,False) }}
